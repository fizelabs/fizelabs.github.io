{"version":3,"sources":["jsx/components/Input.jsx","jsx/components/Button.jsx","jsx/Form.jsx","jsx/serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","className","id","this","props","type","placeholder","pl","defaultValue","value","onChange","on_change","React","Component","Button","theme","onClick","on_click","children","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","login_val","password_val","handleLogin","bind","assertThisInitialized","handlePassword","signUp","signIn","e","val","target","setState","alert","concat","components_Input","components_Button","Boolean","window","location","hostname","match","ReactDOM","render","jsx_Form","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAoBeA,mLAfb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,SACCE,GAAIC,KAAKC,MAAMF,GACfG,KAAMF,KAAKC,MAAMC,KACjBC,YAAaH,KAAKC,MAAMG,GACxBC,aAAcL,KAAKC,MAAMK,MACzBR,UAAU,cACVS,SAAUP,KAAKC,MAAMO,oBAXNC,IAAMC,WCaXC,mLAVb,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAAWE,KAAKC,MAAMW,MAAOC,QAASb,KAAKC,MAAMa,UAChEnB,EAAAC,EAAAC,cAAA,YACEG,KAAKC,MAAMc,kBANIN,IAAMC,WCoDZM,cAhDb,SAAAA,EAAYf,GAAM,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KAEDsB,MAAQ,CACXC,UAAU,GACVC,aAAa,IAGfR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKY,eAAiBZ,EAAKY,eAAeF,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACtBA,EAAKa,OAASb,EAAKa,OAAOH,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAKc,OAASd,EAAKc,OAAOJ,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAXEA,2EAeNe,GACV,IAAIC,EAAMD,EAAEE,OAAO5B,MACnBN,KAAKmC,SAAS,CAACX,UAAUS,2CAGZD,GACd,IAAIC,EAAMD,EAAEE,OAAO5B,MACnBN,KAAKmC,SAAS,CAACV,aAAaQ,qCAI3BG,MAAK,mEAAAC,OAAkBrC,KAAKuB,MAAMC,UAA7B,OAAAa,OAA4CrC,KAAKuB,MAAME,gDAI5DW,MAAK,iJAAAC,OAA+BrC,KAAKuB,MAAMC,UAA1C,OAAAa,OAAyDrC,KAAKuB,MAAME,aAApE,gNAIN,OACC9B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACyC,EAAD,CAAOvC,GAAG,QAAQG,KAAK,OAAOE,GAAG,oDAAYE,MAAON,KAAKuB,MAAMC,UAAWhB,UAAWR,KAAK0B,cAC1F/B,EAAAC,EAAAC,cAACyC,EAAD,CAAOvC,GAAG,WAAWG,KAAK,OAAOE,GAAG,0DAAaE,MAAON,KAAKuB,MAAME,aAAcjB,UAAWR,KAAK6B,iBACjGlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC0C,EAAD,CAAQ3B,MAAM,UAAUE,SAAUd,KAAK8B,QAAvC,4BACAnC,EAAAC,EAAAC,cAAC0C,EAAD,CAAQ3B,MAAM,UAAUE,SAAUd,KAAK+B,QAAvC,+EA1CWrB,aCQC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAUC,SAASC,eAAe,SDuH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fbf148c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"row row-around\">\r\n\t\t\t\t<input \r\n\t\t\t\t\tid={this.props.id} \r\n\t\t\t\t\ttype={this.props.type}\r\n\t\t\t\t\tplaceholder={this.props.pl}\r\n\t\t\t\t\tdefaultValue={this.props.value}\r\n\t\t\t\t\tclassName=\"form__input\"\r\n\t\t\t\t\tonChange={this.props.on_change}\r\n\t\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nclass Button extends React.Component{\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className={\"btn btn-\"+this.props.theme} onClick={this.props.on_click}>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport Input from './components/Input';\nimport Button from './components/Button';\n\nclass Form extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      login_val:'',\n      password_val:'',\n    }\n  \n    this.handleLogin = this.handleLogin.bind(this);\n    this.handlePassword = this.handlePassword.bind(this);\n    this.signUp = this.signUp.bind(this);\n    this.signIn = this.signIn.bind(this);\n\n  }\n\n  handleLogin(e){\n    let val = e.target.value;\n    this.setState({login_val:val});\n  }\n\n  handlePassword(e){\n   let val = e.target.value;\n   this.setState({password_val:val});\n  }\n\n  signUp(){\n    alert(`Вы вошли как: ${this.state.login_val} | ${this.state.password_val}`);\n  }\n\n  signIn(){\n    alert(`Вы зарегестрировались как: ${this.state.login_val} | ${this.state.password_val} \\nТеперь вы можете войти в систему`);\n  }\n\n  render(){\n   return(\n    <form>\n      <Input id=\"login\" type=\"text\" pl=\"Ваш логин\" value={this.state.login_val} on_change={this.handleLogin} />\n      <Input id=\"password\" type=\"text\" pl=\"Ваш пароль\" value={this.state.password_val} on_change={this.handlePassword} />\n      <div className=\"row row-around\">\n        <Button theme=\"success\" on_click={this.signUp}>Вход</Button>\n        <Button theme=\"primary\" on_click={this.signIn}>Регистрация</Button>\n      </div>\n    </form>\n  );\n }\n\n}\n\nexport default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport Form from './jsx/Form';\nimport * as serviceWorker from './jsx/serviceWorker';\n\nReactDOM.render(<Form />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}